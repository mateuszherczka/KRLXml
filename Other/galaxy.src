&ACCESS RVP
&PARAM TEMPLATE = C:\KRC\Roboter\Template\vorgabe
&PARAM EDITMASK = *
DEF galaxy( )
;FOLD INI
STRUC str char s[81]
DECL str sendtext[11]
DECL str rectext[5]
DECL char sensorname[40]
DECL str dummy
BOOL errbl
BOOL brk
INT  errint
INT i
INT counter
BOOL holdon
INT  seconds

REAL  velocity
INT   motionmode
FRAME extframe
BOOL on

BOOL cstate
BOOL bNew

INT offset

DECL STATE_T state

  ;FOLD BASISTECH INI
    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )
    INTERRUPT ON 3
    BAS (#INITMOV,0 )
  ;ENDFOLD (BASISTECH INI)

  ;FOLD USER INI
    ;Make your modifications here
  ;ENDFOLD (USER INI)

;ENDFOLD (INI)

;FOLD PTP HOME  Vel= 25 % DEFAULT;%{PE}%R 5.4.33,%MKUKATPBASIS,%CMOVE,%VPTP,%P 1:PTP, 2:HOME, 3:, 5:25, 7:DEFAULT
$BWDSTART=FALSE
PDAT_ACT=PDEFAULT
FDAT_ACT=FHOME
BAS(#PTP_PARAMS,100)
$H_POS=XHOME
PTP XHOME 
;ENDFOLD



;FOLD Initial variables
on =TRUE
brk = FALSE
counter = 0
cstate = FALSE

holdon = FALSE
seconds = 1
;ENDFOLD
;FOLD Build Dataset to send and receive
; send structure
sendtext[1].s[] = "<Robot>"
sendtext[2].s[] = "<Data>"
sendtext[3].s[] = "<ComStatus> Unlimited </ComStatus>"
sendtext[4].s[] = "<Tick>"
sendtext[5].s[] = "0"
sendtext[6].s[] = "</Tick>"
sendtext[7].s[] = "</Data>"
sendtext[8].s[] = "</Robot>"

; receive structure
rectext[1].s[] = "GalaxyRemote.SiriusRobotControl.TString"
rectext[2].s[] = "GalaxyRemote.SiriusRobotControl.Motion.Velocity"
rectext[3].s[] = "GalaxyRemote.SiriusRobotControl.Motion.MotionMode"
rectext[4].s[] = "GalaxyRemote.SiriusRobotControl.XFrame"
rectext[5].s[] = "GalaxyRemote.SiriusRobotControl"

;ENDFOLD
;FOLD DECLare sensorname and open channel SampleSensor
sensorname[]="GalaxyRemote"
errint = EKX_open(sensorname[])
EKX_handleerror(errint)

;ENDFOLD
WHILE cstate == FALSE

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD

; The channel GalaxyRemote is open and the server expects data from robot
; There are 2 ways to send data
; The first one:
;FOLD Send Data by using easy send commands
FOR i=1 TO 4
 errint = EKX_writeline(sensorname[], sendtext[i].s[])
 IF errint == eioc_error THEN
    HALT
 ENDIF
ENDFOR

errint = EKX_writeline(sensorname[], sendtext[5].s[])
IF errint == eioc_error THEN
 HALT
ENDIF

FOR i=6 TO 8
 errint=EKX_writeline(sensorname[], sendtext[i].s[])
 IF errint == eioc_error THEN
  HALT
 ENDIF
ENDFOR

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


counter = counter + 1
 IF counter == 1 THEN
  on=FALSE
 ENDIF

offset = 0
SWRITE(sendtext[5].s[], state,offset,"%d",counter)
;ENDFOLD

;FOLD Holdon
IF holdon == TRUE THEN
 HALT
ENDIF

;ENDFOLD

; The server program get the data and reply with a dataset
; Next commands get the data from the stacks and filled the KRC variables
; Open the FOLD and take a look at: get frame...

;FOLD Get Data from stack, only if there are new values
 errbl = EKX_WaitForSensorData(0, rectext[5].s[], 20000)
 IF errbl == FALSE THEN
   HALT
 ENDIF

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


 ; get string
 dummy = rectext[1]
 errbl = EKX_GetStringElement(0, dummy.s[], bNew)
 IF errbl == FALSE THEN
   HALT
 ENDIF

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


 ;get velocity
 errbl = EKX_GetRealElement(0, rectext[2].s[], velocity, bNew)
 IF errbl == FALSE THEN
   HALT
 ENDIF

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


 ; get motion mode
 errbl = EKX_GetIntegerElement(0, rectext[3].s[], motionmode, bNew)
 IF errbl == FALSE THEN
   HALT
 ENDIF

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


 ; get frame until the stack is empty!
 errbl = EKX_GetFrameElement( 0,  rectext[4].s[], extframe, bNew)
 IF errbl == FALSE THEN
  HALT
 ELSE

 ;FOLD Holdon
 IF holdon == TRUE THEN
  HALT
 ;ELSE
  ;WAIT SEC seconds
 ENDIF
;ENDFOLD


 SWITCH motionmode 
     CASE 0

       BAS(#PTP_PARAMS, velocity)
       PTP extframe

     CASE 1
       BAS(#CP_PARAMS, velocity)
       LIN extframe
     CASE 2
       ;CIRC extframe, CA 260 C_ORI
     DEFAULT
       PTP extframe
 ENDSWITCH
 WAIT SEC seconds
ENDIF

 ;FOLD Holdon
    IF holdon == TRUE THEN
     HALT
    ENDIF
 ;ENDFOLD

    ; Take a look in the view of variables and show extframe
    ; Recognise the OUT[1] is setted
;ENDFOLD

ENDWHILE

;FOLD At the end the channel have to be closed
errbl = EKX_close(sensorname[])
IF errbl == FALSE THEN
  HALT
ENDIF
;ENDFOLD

END